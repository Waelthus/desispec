#!/usr/bin/env python

"""
One stop shopping for processing a DESI exposure

Examples at NERSC:

# ARC: 18 min on 2 nodes
time srun -N 2 -n 60 -C haswell -t 25:00 --qos realtime desi_proc --mpi -n 20191029 -e 22486

# FLAT: 13 min
time srun -n 20 -N 1 -C haswell -t 15:00 --qos realtime desi_proc --mpi -n 20191029 -e 22487

# TWILIGHT: 8min
time srun -n 20 -N 1 -C haswell -t 15:00 --qos realtime desi_proc --mpi -n 20191029 -e 22497

# SKY: 11 min
time srun -n 20 -N 1 -C haswell -t 15:00 --qos realtime desi_proc --mpi -n 20191029 -e 22536

# ZERO: 2 min
time srun -n 20 -N 1 -C haswell -t 15:00 --qos realtime desi_proc --mpi -n 20191029 -e 22561
"""

import time
from collections import OrderedDict

progress = OrderedDict(start=time.asctime())

import sys, os, argparse, re, time, collections
import subprocess
from copy import deepcopy

import numpy as np
import fitsio

import desispec.io
from desispec.io import findfile
from desispec.calibfinder import findcalibfile
from desispec.fiberflat import apply_fiberflat
from desispec.sky import subtract_sky
from desispec.util import runcmd
import desispec.scripts.extract
import desispec.scripts.specex

from desitarget.targetmask import desi_mask

from desiutil.log import get_logger, DEBUG, INFO

parser = argparse.ArgumentParser(usage = "{prog} [options]")
parser.add_argument("-n", "--night", type=int,  help="YEARMMDD night")
parser.add_argument("-e", "--expid", type=int,  help="Exposure ID")
parser.add_argument("--obstype", type=str,  help="science, arc, flat, dark, zero, ...")
parser.add_argument("--cameras", type=str,  help="comma separated list of cameras to process")

parser.add_argument("-i", "--input", type=str,  help="input raw data file")
parser.add_argument("--mpi", action="store_true", help="Use MPI parallelism")
parser.add_argument("--fframe", action="store_true", help="Also write non-sky subtracted fframe file")
parser.add_argument("--nofiberflat", action="store_true", help="Do not apply fiberflat")
parser.add_argument("--noskysub", action="store_true", help="Do not subtract the sky")
parser.add_argument("--psf",type=str,required=False,default=None, help="use this input psf (trace shifts will still be computed)")
parser.add_argument("--fiberflat",type=str,required=False,default=None, help="use this fiberflat")

parser.add_argument("--batch", action="store_true", help="Submit a batch job to process this exposure")
parser.add_argument("--nosubmit", action="store_true", help="Create batch script but don't submit")
parser.add_argument("-q", "--queue", type=str, default="realtime", help="batch queue to use")

args = parser.parse_args()
log = get_logger()

if args.mpi and not args.batch:
    from mpi4py import MPI
    comm = MPI.COMM_WORLD
    rank = comm.rank
    size = comm.size
else:
    comm = None
    rank = 0
    size = 1

#- Preflight checks
if rank > 0:
    #- Let rank 0 fetch these, and then broadcast
    hdr = None
    camhdr = None
    args = None
else:
    if args.input is None:
        if args.night is None or args.expid is None:
            raise RuntimeError('Must specify --input or --night AND --expid')
    
        args.input = findfile('raw', night=args.night, expid=args.expid)

    if not os.path.isfile(args.input):
        raise IOError('Missing input file: {}'.format(args.input))

    #- Fill in values from raw data header if not overridden by command line
    fx = fitsio.FITS(args.input)
    if 'SPS' in fx:
        hdr = fx['SPS'].read_header()
    else:
        hdr = fx[0].read_header()

    if args.expid is None:
        args.expid = int(hdr['EXPID'])

    if args.night is None:
        args.night = int(hdr['NIGHT'])

    if args.obstype is None:
        if 'OBSTYPE' in hdr:
            args.obstype = hdr['OBSTYPE'].strip()
        elif 'FLAVOR' in hdr:
            args.obstype = hdr['FLAVOR'].strip()
            log.warning('Using OBSTYPE={} from FLAVOR keyword'.format(args.obstype))
        else:
            raise RuntimeError('Need --obstype or OBSTYPE or FLAVOR header keywords')

    if args.cameras is None:
        recam = re.compile('^[brzBRZ][\d]$')
        cameras = list()
        for hdu in fx.hdu_list:
            if recam.match(hdu.get_extname()):
                cameras.append(hdu.get_extname().lower())

        if len(cameras) == 0:
            raise RuntimeError("No [BRZ][0-9] camera HDUs found in {}".format(args.input))

        args.cameras = cameras
        cameras = None
    else:
        args.cameras = [cam.lower() for cam in args.cameras.split(',')]

    args.cameras = sorted(args.cameras)  #- just because...
    camhdr = dict()
    for cam in args.cameras:
        camhdr[cam] = fx[cam].read_header()

    fx.close()

if comm is not None:
    args = comm.bcast(args, root=0)
    hdr = comm.bcast(hdr, root=0)
    camhdr = comm.bcast(camhdr, root=0)

args.obstype = args.obstype.upper()
known_obstype = ['SCIENCE', 'ARC', 'FLAT', 'ZERO', 'DARK',
    'TESTARC', 'TESTFLAT', 'PIXFLAT', 'SKY', 'TWILIGHT', 'OTHER']
if args.obstype not in known_obstype:
    raise RuntimeError('obstype {} not in {}'.format(args.obstype, known_obstype))

#-------------------------------------------------------------------------
#- Create and submit a batch job if requested

if args.batch:
    reduxdir = desispec.io.specprod_root()
    batchdir = os.path.join(reduxdir, 'run', 'scripts', 'night', str(args.night))
    os.makedirs(batchdir, exist_ok=True)
    jobname = '{}-{}-{:08d}'.format(args.obstype.lower(), args.night, args.expid)
    scriptfile = os.path.join(batchdir, jobname+'.slurm')

    ncameras = len(args.cameras)
    nspectro = (ncameras-1)//3 + 1
    if args.obstype in ('ARC', 'TESTARC'):
        ncores, runtime = 20*ncameras, 25
    elif args.obstype in ('FLAT', 'TESTFLAT'):
        ncores, runtime = 20*nspectro, 20
    elif args.obstype in ('SKY', 'TWILIGHT'):
        ncores, runtime = 20*nspectro, 15
    elif args.obstype in ('ZERO', 'DARK'):
        ncores, runtime = ncameras, 5
    else:
        print('ERROR: unknown obstype={}'.format(args.obstype))
        sys.exit(1)

    nodes = (ncores-1) // 32 + 1
    assert runtime < 60

    with open(scriptfile, 'w') as fx:
        fx.write('#!/bin/bash -l\n\n')
        fx.write('#SBATCH -C haswell\n')
        fx.write('#SBATCH -N {}\n'.format(nodes))
        fx.write('#SBATCH -n {}\n'.format(ncores))
        fx.write('#SBATCH -c 2\n')
        fx.write('#SBATCH --qos {}\n'.format(args.queue))
        fx.write('#SBATCH --account desi\n')
        fx.write('#SBATCH --job-name {}\n'.format(jobname))
        fx.write('#SBATCH --output {}/{}-%j.log\n'.format(batchdir, jobname))
        fx.write('#SBATCH --time=00:{:02d}:00\n'.format(runtime))

        #- If we are asking for more than half the node, ask for all of it
        #- to avoid memory problems with other people's jobs
        if ncores > 16:
            fx.write('#SBATCH --exclusive\n')

        fx.write('\n')

        cmd = ' '.join(sys.argv).replace(' --batch', ' ')
        if not args.mpi:
            cmd += ' --mpi'

        srun = 'srun -N {} -n {} {}'.format(nodes, ncores, cmd)

        fx.write('echo Starting at $(date)\n')
        fx.write('echo Running {}\n'.format(srun))
        fx.write('{}\n'.format(srun))
        fx.write('echo Done at $(date)\n')
    
    print('Wrote {}'.format(scriptfile))
    err = 0
    if not args.nosubmit:
        err = subprocess.call(['sbatch', scriptfile])
    sys.exit(err)

#-------------------------------------------------------------------------
#- Proceeding with running

#- What are we going to do?
if rank == 0:
    log.info('----------')
    log.info('Input {}'.format(args.input))
    log.info('Night {} expid {}'.format(args.night, args.expid))
    log.info('Obstype {}'.format(args.obstype))
    log.info('Cameras {}'.format(args.cameras))
    log.info('Output root {}'.format(desispec.io.specprod_root()))
    log.info('----------')

#- Create output directories if needed
if rank == 0:
    preprocdir = os.path.dirname(findfile('preproc', args.night, args.expid, 'b0'))
    expdir = os.path.dirname(findfile('frame', args.night, args.expid, 'b0'))
    os.makedirs(preprocdir, exist_ok=True)
    os.makedirs(expdir, exist_ok=True)

#- Wait for rank 0 to make directories before proceeding
if comm is not None:
    comm.barrier()

if rank == 0:
    progress['init'] = time.asctime()

#-------------------------------------------------------------------------
#- Preproc
#- All obstypes get preprocessed

if rank == 0:
    log.info('Starting preproc at {}'.format(time.asctime()))

for i in range(rank, len(args.cameras), size):
    camera = args.cameras[i]
    outfile = findfile('preproc', args.night, args.expid, camera)
    outdir = os.path.dirname(outfile)
    cmd = "desi_preproc -i {} -o {} --outdir {} --cameras {}".format(
        args.input, outfile, outdir, camera)
    runcmd(cmd, inputs=[args.input], outputs=[outfile])

if comm is not None:
    comm.barrier()

if rank == 0:
    progress['preproc'] = time.asctime()

#-------------------------------------------------------------------------
#- Traceshift

if args.obstype in ['SCIENCE', 'FLAT', 'TESTFLAT', 'SKY', 'TWILIGHT']:
    if rank == 0:
        log.info('Starting traceshift at {}'.format(time.asctime()))

    for i in range(rank, len(args.cameras), size):
        camera = args.cameras[i]
        preprocfile = findfile('preproc', args.night, args.expid, camera)
        if args.psf is not None :
            inpsf = args.psf
        else :
            inpsf = findcalibfile([hdr, camhdr[camera]], 'PSF')
        outpsf = findfile('psf', args.night, args.expid, camera)
        cmd = "desi_compute_trace_shifts"
        cmd += " -i {}".format(preprocfile)
        cmd += " --psf {}".format(inpsf)
        cmd += " --outpsf {}".format(outpsf)

        if args.obstype in ['SCIENCE', 'SKY', 'TWILIGHT']:
            cmd += ' --sky'
        
        runcmd(cmd, inputs=[preprocfile, inpsf], outputs=[outpsf])
        
    if comm is not None:
        comm.barrier()

    if rank == 0:
        progress['traceshift'] = time.asctime()

#-------------------------------------------------------------------------
#- PSF
#- MPI parallelize this step

if args.obstype in ['ARC', 'TESTARC']:
    if rank == 0:
        log.info('Starting specex PSF fitting at {}'.format(time.asctime()))

    if rank > 0:
        cmds = inputs = outputs = None
    else:
        cmds = dict()
        inputs = dict()
        outputs = dict()
        for camera in args.cameras:
            preprocfile = findfile('preproc', args.night, args.expid, camera)
            inpsf = findcalibfile([hdr, camhdr[camera]], 'PSF')
            outpsf = findfile('psf', args.night, args.expid, camera)
            cmd = 'desi_compute_psf'
            cmd += ' --input-image {}'.format(preprocfile)
            cmd += ' --input-psf {}'.format(inpsf)
            cmd += ' --output-psf {}'.format(outpsf)

            if not os.path.exists(outpsf):
                cmds[camera] = cmd
                inputs[camera] = [preprocfile, inpsf]
                outputs[camera] = [outpsf,]
        
    if comm is not None:
        cmds = comm.bcast(cmds, root=0)
        inputs = comm.bcast(inputs, root=0)
        outputs = comm.bcast(outputs, root=0)
        #- split communicator by 20 (number of bundles)
        group_size = 20
        if (rank == 0) and (size%group_size != 0):
            log.warning('MPI size={} should be evenly divisible by {}'.format(
                size, group_size))
    
        group = rank // group_size
        num_groups = (size + group_size - 1) // group_size
        comm_group = comm.Split(color=group)
        
        for i in range(group, len(args.cameras), num_groups):
            camera = args.cameras[i]
            if camera in cmds:
                cmdargs = cmds[camera].split()[1:]
                cmdargs = desispec.scripts.specex.parse(cmdargs)
                if comm_group.rank == 0:
                    print('RUNNING: {}'.format(cmds[camera]))

                desispec.scripts.specex.main(cmdargs, comm=comm_group)

        comm.barrier()
        
    else:
        log.warning('fitting PSFs without MPI parallelism; this will be SLOW')
        for camera in args.cameras:
            if camera in cmds:
                runcmd(cmds[camera], inputs=inputs[camera], outputs=outputs[camera])

    if comm is not None:
        comm.barrier()

    if rank == 0:
        progress['psf'] = time.asctime()

#-------------------------------------------------------------------------
#- Extract
#- This is MPI parallel so handle a bit differently

# maybe add ARC and TESTARC too
if args.obstype in ['SCIENCE', 'FLAT', 'TESTFLAT', 'SKY', 'TWILIGHT']:

    if rank == 0:
        log.info('Starting extractions at {}'.format(time.asctime()))

    if rank > 0:
        cmds = inputs = outputs = None
    else:
        cmds = dict()
        inputs = dict()
        outputs = dict()
        for camera in args.cameras:
            cmd = 'desi_extract_spectra'
        
            #- TODO: standardize where these params are kept
            if camera.startswith('b'):
                cmd += ' -w 3579.0,5934.0,0.8'
            elif camera.startswith('r'):
                cmd += ' -w 5635.0,7731.0,0.8'
            elif camera.startswith('z'):
                cmd += ' -w 7445.4,9824.0,0.8'
        
            preprocfile = findfile('preproc', args.night, args.expid, camera)
            psffile = findfile('psf', args.night, args.expid, camera)
            framefile = findfile('frame', args.night, args.expid, camera)
            cmd += ' -i {}'.format(preprocfile)
            cmd += ' -p {}'.format(psffile)
            cmd += ' -o {}'.format(framefile)
       
            if not os.path.exists(framefile):
                cmds[camera] = cmd
                inputs[camera] = [preprocfile, psffile]
                outputs[camera] = [framefile,]

    #- TODO: refactor/combine this with PSF comm splitting logic
    if comm is not None:
        cmds = comm.bcast(cmds, root=0)
        inputs = comm.bcast(inputs, root=0)
        outputs = comm.bcast(outputs, root=0)

        #- split communicator by 20 (number of bundles)
        extract_size = 20
        if (rank == 0) and (size%extract_size != 0):
            log.warning('MPI size={} should be evenly divisible by {}'.format(
                size, extract_size))
    
        extract_group = rank // extract_size
        num_extract_groups = (size + extract_size - 1) // extract_size
        comm_extract = comm.Split(color=extract_group)
        
        for i in range(extract_group, len(args.cameras), num_extract_groups):
            camera = args.cameras[i]
            if camera in cmds:
                cmdargs = cmds[camera].split()[1:]
                extract_args = desispec.scripts.extract.parse(cmdargs)
                if comm_extract.rank == 0:
                    print('RUNNING: {}'.format(cmds[camera]))

                desispec.scripts.extract.main_mpi(extract_args, comm=comm_extract)

        comm.barrier()
        
    else:
        log.warning('running extractions without MPI parallelism; this will be SLOW')
        for camera in args.cameras:
            runcmd(cmds[camera], inputs=inputs[camera], outputs=outputs[camera])

    if comm is not None:
        comm.barrier()

    if rank == 0:
        progress['extract'] = time.asctime()

#-------------------------------------------------------------------------
#- Fiberflat

if args.obstype in ['FLAT', 'TESTFLAT'] :
    if rank == 0:
        log.info('Starting fiberflats at {}'.format(time.asctime()))

    for i in range(rank, len(args.cameras), size):
        camera = args.cameras[i]
        framefile = findfile('frame', args.night, args.expid, camera)
        fiberflatfile = findfile('fiberflat', args.night, args.expid, camera)
        cmd = "desi_compute_fiberflat"
        cmd += " -i {}".format(framefile)
        cmd += " -o {}".format(fiberflatfile)
        runcmd(cmd, inputs=[framefile,], outputs=[fiberflatfile,])

    if comm is not None:
        comm.barrier()

    if rank == 0:
        progress['fiberflat'] = time.asctime()

#-------------------------------------------------------------------------
#- Apply fiberflat and write fframe file

if args.obstype in ['SCIENCE', 'SKY'] and args.fframe and ( not args.nofiberflat ) :
    if rank == 0:
        log.info('Applying fiberflat at {}'.format(time.asctime()))

    for i in range(rank, len(args.cameras), size):
        camera = args.cameras[i]
        fframefile = findfile('fframe', args.night, args.expid, camera)
        if not os.path.exists(fframefile):
            framefile = findfile('frame', args.night, args.expid, camera)
            fr = desispec.io.read_frame(framefile)
            if args.fiberflat :
                flatfilename=args.fiberflat
            else:
                flatfilename=findcalibfile([fr.meta,], 'FIBERFLAT')
            ff = desispec.io.read_fiberflat(flatfilename)
            apply_fiberflat(fr, ff)

            fframefile = findfile('fframe', args.night, args.expid, camera)
            desispec.io.write_frame(fframefile, fr)

    if comm is not None:
        comm.barrier()

    if rank == 0:
        progress['fframe'] = time.asctime()

#-------------------------------------------------------------------------
#- Select random sky fibers (inplace update of frame file)
#- TODO: move this to a function somewhere
#- TODO: this assigns different sky fibers to each frame of same spectrograph

if args.obstype == 'SKY' and (not args.noskysub) :
    if rank == 0:
        log.info('Picking sky fibers at {}'.format(time.asctime()))

    for i in range(rank, len(args.cameras), size):
        camera = args.cameras[i]
        framefile = findfile('frame', args.night, args.expid, camera)
        orig_frame = desispec.io.read_frame(framefile)

        #- Make a copy so that we can apply fiberflat
        fr = deepcopy(orig_frame)

        if np.any(fr.fibermap['OBJTYPE'] == 'SKY'):
            log.info('{} sky fibers already set; skipping'.format(
                os.path.basename(framefile)))
            continue

        #- Apply fiberflat then select random fibers below a flux cut
        if args.fiberflat :
            flatfilename=args.fiberflat
        else:
            flatfilename=findcalibfile([fr.meta,], 'FIBERFLAT')
        ff = desispec.io.read_fiberflat(flatfilename)
        apply_fiberflat(fr, ff)
        sumflux = np.sum(fr.flux, axis=1)
        fluxcut = np.percentile(sumflux, 90)
        iisky = np.where(sumflux < fluxcut)[0]
        iisky = np.random.choice(iisky, size=100, replace=False)

        #- Update fibermap or original frame and write out
        orig_frame.fibermap['OBJTYPE'][iisky] = 'SKY'
        orig_frame.fibermap['DESI_TARGET'][iisky] |= desi_mask.SKY

        desispec.io.write_frame(framefile, orig_frame)

    if comm is not None:
        comm.barrier()

    if rank == 0:
        progress['picksky'] = time.asctime()

#-------------------------------------------------------------------------
#- Sky subtraction
if args.obstype in ['SCIENCE', 'SKY'] and (not args.noskysub ) :
    if rank == 0:
        log.info('Starting sky subtraction at {}'.format(time.asctime()))

    for i in range(rank, len(args.cameras), size):
        camera = args.cameras[i]
        framefile = findfile('frame', args.night, args.expid, camera)
        hdr = fitsio.read_header(framefile, 'FLUX')
        if args.fiberflat :
            fiberflatfile=args.fiberflat
        else:
            fiberflatfile=findcalibfile([fr.meta,], 'FIBERFLAT')
        skyfile = findfile('sky', args.night, args.expid, camera)

        cmd = "desi_compute_sky"
        cmd += " -i {}".format(framefile)
        cmd += " --fiberflat {}".format(fiberflatfile)
        cmd += " --o {}".format(skyfile)

        runcmd(cmd, inputs=[framefile, fiberflatfile], outputs=[skyfile,])

        #- sframe = flatfielded sky-subtracted but not flux calibrated frame
        #- Note: this re-reads and re-does steps previously done for picking
        #- sky fibers; desi_proc is about human efficiency,
        #- not I/O or CPU efficiency...
        sframefile = desispec.io.findfile('sframe', args.night, args.expid, camera)
        if not os.path.exists(sframefile):
            frame = desispec.io.read_frame(framefile)
            fiberflat = desispec.io.read_fiberflat(fiberflatfile)
            sky = desispec.io.read_sky(skyfile)
            apply_fiberflat(frame, fiberflat)
            subtract_sky(frame, sky, throughput_correction=True)
            desispec.io.write_frame(sframefile, frame)

    if comm is not None:
        comm.barrier()

    if rank == 0:
        progress['sky'] = time.asctime()

#-------------------------------------------------------------------------
#- Wrap up

if rank == 0:
    progress['done'] = time.asctime()

    t0 = None
    print('\nSummary of completion times:')
    for key, value in progress.items():
        if t0 is None:
            print('  {:10s} {}'.format(key, value))
            t0 = time.mktime(time.strptime(value))
        else:
            t1 = time.mktime(time.strptime(value))
            dt = (t1-t0)/60.0
            t0 = t1
            print('  {:10s} {} ({:.1f} min)'.format(key, value, dt))



